// Original slow query
MATCH (p1:Player {id: 'mayssk01'})-[r:teamMatesWith*3]-(p2:Player)
WHERE NOT (p1)-[:teamMatesWith*1..2]-(p2)
RETURN DISTINCT p2

// Optimized version 1: Using path existence check
MATCH path = (p1:Player {id: 'mayssk01'})-[r:TEAMMATE_WITH*3]-(p2:Player)
WHERE NOT EXISTS {
    MATCH (p1)-[:TEAMMATE_WITH*1..2]-(p2)
}
RETURN DISTINCT p2.name, p2.id

// Optimized version 2: Using shortestPath with explicit filtering
MATCH path = shortestPath((p1:Player {id: 'mayssk01'})-[:TEAMMATE_WITH*1..4]-(p2:Player))
WHERE length(path) = 3
RETURN DISTINCT p2.name, p2.id

// Add indexes to improve performance
CREATE INDEX player_id_index IF NOT EXISTS FOR (p:Player) ON (p.id);

// Alternative two-step approach
// Step 1: Find all teammates with path lengths 1 and 2
MATCH (origin:Player {id: 'mayssk01'})-[:TEAMMATE_WITH*1..2]-(close:Player)
WITH collect(close) AS closeTeammates

// Step 2: Find exactly 3-hop teammates not in the close teammates
MATCH path = (origin:Player {id: 'mayssk01'})-[:TEAMMATE_WITH*3]-(distant:Player)
WHERE NOT distant IN closeTeammates AND distant.id <> 'mayssk01'
RETURN DISTINCT distant.name, distant.id

// Query to check relationship distribution (for tuning)
MATCH (p:Player)
RETURN count(p) as PlayerCount

MATCH ()-[r:TEAMMATE_WITH]->()
RETURN count(r) as RelationshipCount

// Find the most connected players (useful for query planning)
MATCH (p:Player)-[r:TEAMMATE_WITH]-()
WITH p, count(r) as connections
RETURN p.name, connections
ORDER BY connections DESC
LIMIT 10